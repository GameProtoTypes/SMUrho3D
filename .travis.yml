sudo: true
dist: xenial
language: cpp
cache:
  directories:
    - /tmp/downloads
env:
  global:
    - MAKEFLAGS=-j4
    - URHO3D_SAMPLES=ON
    - URHO3D_PACKAGING=ON
    - URHO3D_SSE=OFF
addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
      - llvm-toolchain-xenial-8
    packages:
      - gcc-6
      - g++-6
      - clang-8
      - libasound2-dev
      - libxrandr-dev
      - libgl1-mesa-dev
      - libglu1-mesa-dev
notifications:
  email:
    on_success: never
    on_failure: never
branches:
  except:
    - /^(.*[^\w])?(appveyor|no-ci)-.+$/
matrix:
  fast_finish: true
  include:
    - &Linux-gcc
      os: linux
      compiler: gcc
      env:
        - BUILD_SHARED_LIBS=OFF
        - CC=gcc-6
        - CXX=g++-6
    - <<: *Linux-gcc
      env:
        - BUILD_SHARED_LIBS=ON
        - URHO3D_WITH_MONO=ON
        - CC=gcc-6
        - CXX=g++-6
    - &Linux-clang
      os: linux
      compiler: clang
      env:
        - BUILD_SHARED_LIBS=OFF
        - CC=clang-8
        - CXX=clang++-8
    - <<: *Linux-clang
      env:
        - BUILD_SHARED_LIBS=ON
        - URHO3D_WITH_MONO=ON
        - CC=clang-8
        - CXX=clang++-8
    - &MacOS
      os: osx
      compiler: clang
      env:
        - BUILD_SHARED_LIBS=OFF
    - <<: *MacOS
      env:
        - BUILD_SHARED_LIBS=ON
        - URHO3D_WITH_MONO=ON
    - <<: *Linux-gcc
      env:
        - BUILD_SHARED_LIBS=OFF
        - EMSCRIPTEN=1
        - CMAKE_TOOLCHAIN_FILE=CMake/Toolchains/Emscripten.cmake
  exclude:
    - &MingW
      env:
        - CMAKE_TOOLCHAIN_FILE=CMake/Toolchains/MinGW.cmake
        - CMAKE_SYSTEM_PROCESSOR=x86_64
        - URHO3D_RENDERER=D3D9
      addons:
        apt:
          packages:
            - gcc-mingw-w64-x86-64
            - g++-mingw-w64-x86-64
            - binutils-mingw-w64-x86-64
    - <<: *MingW
      env:
        - BUILD_SHARED_LIBS=ON
        - CMAKE_TOOLCHAIN_FILE=CMake/Toolchains/MinGW.cmake
        - CMAKE_SYSTEM_PROCESSOR=x86_64
        - URHO3D_RENDERER=D3D9

before_install: |
  eval "${MATRIX_EVAL}"
  if [[ $TRAVIS_OS_NAME == 'linux' ]];
  then
      sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
      echo "deb http://download.mono-project.com/repo/ubuntu stable-xenial main" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list
      sudo apt-get update -qq
  else
      brew update
  fi

install: |
  mkdir -p /tmp/downloads
  if [[ $TRAVIS_OS_NAME == 'linux' ]];
  then
      if [[ "$URHO3D_WITH_MONO" != "" ]];
      then
          sudo apt-get install -y --force-yes mono-devel msbuild
      fi
  elif [[ "$URHO3D_WITH_MONO" != "" ]];
  then
      # mono
      if [[ ! -f /tmp/downloads/Mono.pkg ]];
      then
          wget https://download.mono-project.com/archive/5.10.1/macos-10-universal/MonoFramework-MDK-5.10.1.57.macos10.xamarin.universal.pkg -O /tmp/downloads/Mono.pkg
      fi
      sudo installer -pkg /tmp/downloads/Mono.pkg -target /
  fi
  if [[ "$EMSCRIPTEN" != "" ]];
  then
      if [[ ! -f /tmp/downloads/emscripten-sdk.zip ]];
      then
          wget https://github.com/rokups/emscripten-sdk/archive/master.zip -O /tmp/downloads/emscripten-sdk.zip
      fi
  fi

before_script: |
  if [[ "$EMSCRIPTEN" != "" ]];
  then
      if [[ ! $EMSCRIPTEN_WASM ]]; then
          export BINARYEN=binaryen-master-64bit;
      fi
      unzip /tmp/downloads/emscripten-sdk.zip
      emscripten-sdk-master/emsdk activate --build=Release latest-64bit $BINARYEN
      source emscripten-sdk-master/emsdk_env.sh
      for compiler in $EMSCRIPTEN/{emcc,em++};
      do
          touch -d "2017-01-01 00:00:00 +0800" $compiler;
      done
      export EXTRA_BUILD_FLAGS='--target 11_Physics'
  fi

script: |
  mkdir cmake-build
  cd cmake-build

  echo "CMAKE_TOOLCHAIN_FILE: ${CMAKE_TOOLCHAIN_FILE}"

  cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE} ..

  cmake --build . $EXTRA_BUILD_FLAGS
